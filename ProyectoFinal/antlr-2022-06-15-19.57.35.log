2022-06-15 19:57:35:649 grammar LogManager.java:25 before: (COMBINED_GRAMMAR MatrixLanguage (RULES (RULE program (BLOCK (ALT tk_main tk_open_brace instructions tk_close_brace tk_semicolon))) (RULE instructions (BLOCK (ALT instruction) (ALT instruction instructions))) (RULE instruction (BLOCK (ALT var_declaration tk_semicolon) (ALT assignation tk_semicolon) (ALT write tk_semicolon) (ALT matrix_declare))) (RULE var_declaration (BLOCK (ALT type list))) (RULE list (BLOCK (ALT tk_id) (ALT tk_id tk_comma list))) (RULE type (BLOCK (ALT tk_number) (ALT tk_matrix))) (RULE assignation (BLOCK (ALT tk_id tk_assign expression))) (RULE expression (BLOCK (ALT tk_number) (ALT matrix) (ALT tk_id) (ALT addition) (ALT subtraction) (ALT product) (ALT tk_inverse expression))) (RULE addition (BLOCK (ALT tk_number tk_add tk_number))) (RULE subtraction (BLOCK (ALT tk_number tk_subtract tk_number))) (RULE product (BLOCK (ALT tk_number tk_product tk_number))) (RULE matrix_declare (BLOCK (ALT tk_open_bracket tk_number tk_close_bracket tk_open_bracket tk_number tk_close_bracket))) (RULE matrix_assignation (BLOCK (ALT tk_id tk_assign matrix))) (RULE write (BLOCK (ALT tk_write tk_id))) (RULE printM (BLOCK (ALT tk_print_matrix tk_matrix))) (RULE matrix (BLOCK (ALT tk_open_bracket lines tk_close_bracket))) (RULE lines (BLOCK (ALT line) (ALT line tk_semicolon lines))) (RULE line (BLOCK (ALT tk_number) (ALT tk_number tk_comma tk_number))) (RULE tk_main (BLOCK (ALT 'main'))) (RULE tk_int (BLOCK (ALT 'int'))) (RULE tk_matrix (BLOCK (ALT 'matrix'))) (RULE tk_id (BLOCK (ALT IDENTIFIER))) (RULE tk_number (BLOCK (ALT NUMBER))) (RULE tk_print_matrix (BLOCK (ALT 'printM'))) (RULE tk_write (BLOCK (ALT 'write'))) (RULE tk_semicolon (BLOCK (ALT ';'))) (RULE tk_comma (BLOCK (ALT ','))) (RULE tk_open_brace (BLOCK (ALT '{'))) (RULE tk_close_brace (BLOCK (ALT '}'))) (RULE tk_open_par (BLOCK (ALT '('))) (RULE tk_close_par (BLOCK (ALT ')'))) (RULE tk_open_bracket (BLOCK (ALT '['))) (RULE tk_close_bracket (BLOCK (ALT ']'))) (RULE tk_assign (BLOCK (ALT '='))) (RULE tk_add (BLOCK (ALT '+'))) (RULE tk_subtract (BLOCK (ALT '-'))) (RULE tk_product (BLOCK (ALT '*'))) (RULE tk_inverse (BLOCK (ALT '^'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (+ (BLOCK (ALT [a-zA-Z0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (BLOCK (ALT ' ') (ALT '\t') (ALT '\n'))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//') skip))) (RULE TEXT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2022-06-15 19:57:35:664 grammar LogManager.java:25 after: (COMBINED_GRAMMAR MatrixLanguage (RULES (RULE program (BLOCK (ALT tk_main tk_open_brace instructions tk_close_brace tk_semicolon))) (RULE instructions (BLOCK (ALT instruction) (ALT instruction instructions))) (RULE instruction (BLOCK (ALT var_declaration tk_semicolon) (ALT assignation tk_semicolon) (ALT write tk_semicolon) (ALT matrix_declare))) (RULE var_declaration (BLOCK (ALT type list))) (RULE list (BLOCK (ALT tk_id) (ALT tk_id tk_comma list))) (RULE type (BLOCK (ALT tk_number) (ALT tk_matrix))) (RULE assignation (BLOCK (ALT tk_id tk_assign expression))) (RULE expression (BLOCK (ALT tk_number) (ALT matrix) (ALT tk_id) (ALT addition) (ALT subtraction) (ALT product) (ALT tk_inverse expression))) (RULE addition (BLOCK (ALT tk_number tk_add tk_number))) (RULE subtraction (BLOCK (ALT tk_number tk_subtract tk_number))) (RULE product (BLOCK (ALT tk_number tk_product tk_number))) (RULE matrix_declare (BLOCK (ALT tk_open_bracket tk_number tk_close_bracket tk_open_bracket tk_number tk_close_bracket))) (RULE matrix_assignation (BLOCK (ALT tk_id tk_assign matrix))) (RULE write (BLOCK (ALT tk_write tk_id))) (RULE printM (BLOCK (ALT tk_print_matrix tk_matrix))) (RULE matrix (BLOCK (ALT tk_open_bracket lines tk_close_bracket))) (RULE lines (BLOCK (ALT line) (ALT line tk_semicolon lines))) (RULE line (BLOCK (ALT tk_number) (ALT tk_number tk_comma tk_number))) (RULE tk_main (BLOCK (ALT 'main'))) (RULE tk_int (BLOCK (ALT 'int'))) (RULE tk_matrix (BLOCK (ALT 'matrix'))) (RULE tk_id (BLOCK (ALT IDENTIFIER))) (RULE tk_number (BLOCK (ALT NUMBER))) (RULE tk_print_matrix (BLOCK (ALT 'printM'))) (RULE tk_write (BLOCK (ALT 'write'))) (RULE tk_semicolon (BLOCK (ALT ';'))) (RULE tk_comma (BLOCK (ALT ','))) (RULE tk_open_brace (BLOCK (ALT '{'))) (RULE tk_close_brace (BLOCK (ALT '}'))) (RULE tk_open_par (BLOCK (ALT '('))) (RULE tk_close_par (BLOCK (ALT ')'))) (RULE tk_open_bracket (BLOCK (ALT '['))) (RULE tk_close_bracket (BLOCK (ALT ']'))) (RULE tk_assign (BLOCK (ALT '='))) (RULE tk_add (BLOCK (ALT '+'))) (RULE tk_subtract (BLOCK (ALT '-'))) (RULE tk_product (BLOCK (ALT '*'))) (RULE tk_inverse (BLOCK (ALT '^'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (+ (BLOCK (ALT [a-zA-Z0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (SET ' ' '\t' '\n')) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//') skip))) (RULE TEXT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2022-06-15 19:57:35:680 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR MatrixLanguage (RULES (RULE program (BLOCK (ALT tk_main tk_open_brace instructions tk_close_brace tk_semicolon))) (RULE instructions (BLOCK (ALT instruction) (ALT instruction instructions))) (RULE instruction (BLOCK (ALT var_declaration tk_semicolon) (ALT assignation tk_semicolon) (ALT write tk_semicolon) (ALT matrix_declare))) (RULE var_declaration (BLOCK (ALT type list))) (RULE list (BLOCK (ALT tk_id) (ALT tk_id tk_comma list))) (RULE type (BLOCK (ALT tk_number) (ALT tk_matrix))) (RULE assignation (BLOCK (ALT tk_id tk_assign expression))) (RULE expression (BLOCK (ALT tk_number) (ALT matrix) (ALT tk_id) (ALT addition) (ALT subtraction) (ALT product) (ALT tk_inverse expression))) (RULE addition (BLOCK (ALT tk_number tk_add tk_number))) (RULE subtraction (BLOCK (ALT tk_number tk_subtract tk_number))) (RULE product (BLOCK (ALT tk_number tk_product tk_number))) (RULE matrix_declare (BLOCK (ALT tk_open_bracket tk_number tk_close_bracket tk_open_bracket tk_number tk_close_bracket))) (RULE matrix_assignation (BLOCK (ALT tk_id tk_assign matrix))) (RULE write (BLOCK (ALT tk_write tk_id))) (RULE printM (BLOCK (ALT tk_print_matrix tk_matrix))) (RULE matrix (BLOCK (ALT tk_open_bracket lines tk_close_bracket))) (RULE lines (BLOCK (ALT line) (ALT line tk_semicolon lines))) (RULE line (BLOCK (ALT tk_number) (ALT tk_number tk_comma tk_number))) (RULE tk_main (BLOCK (ALT 'main'))) (RULE tk_int (BLOCK (ALT 'int'))) (RULE tk_matrix (BLOCK (ALT 'matrix'))) (RULE tk_id (BLOCK (ALT IDENTIFIER))) (RULE tk_number (BLOCK (ALT NUMBER))) (RULE tk_print_matrix (BLOCK (ALT 'printM'))) (RULE tk_write (BLOCK (ALT 'write'))) (RULE tk_semicolon (BLOCK (ALT ';'))) (RULE tk_comma (BLOCK (ALT ','))) (RULE tk_open_brace (BLOCK (ALT '{'))) (RULE tk_close_brace (BLOCK (ALT '}'))) (RULE tk_open_par (BLOCK (ALT '('))) (RULE tk_close_par (BLOCK (ALT ')'))) (RULE tk_open_bracket (BLOCK (ALT '['))) (RULE tk_close_bracket (BLOCK (ALT ']'))) (RULE tk_assign (BLOCK (ALT '='))) (RULE tk_add (BLOCK (ALT '+'))) (RULE tk_subtract (BLOCK (ALT '-'))) (RULE tk_product (BLOCK (ALT '*'))) (RULE tk_inverse (BLOCK (ALT '^')))))
2022-06-15 19:57:35:680 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR MatrixLanguageLexer (RULES (RULE T__0 (BLOCK (ALT 'main'))) (RULE T__1 (BLOCK (ALT 'int'))) (RULE T__2 (BLOCK (ALT 'matrix'))) (RULE T__3 (BLOCK (ALT 'printM'))) (RULE T__4 (BLOCK (ALT 'write'))) (RULE T__5 (BLOCK (ALT ';'))) (RULE T__6 (BLOCK (ALT ','))) (RULE T__7 (BLOCK (ALT '{'))) (RULE T__8 (BLOCK (ALT '}'))) (RULE T__9 (BLOCK (ALT '('))) (RULE T__10 (BLOCK (ALT ')'))) (RULE T__11 (BLOCK (ALT '['))) (RULE T__12 (BLOCK (ALT ']'))) (RULE T__13 (BLOCK (ALT '='))) (RULE T__14 (BLOCK (ALT '+'))) (RULE T__15 (BLOCK (ALT '-'))) (RULE T__16 (BLOCK (ALT '*'))) (RULE T__17 (BLOCK (ALT '^'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (+ (BLOCK (ALT [a-zA-Z0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (SET ' ' '\t' '\n')) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//') skip))) (RULE TEXT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2022-06-15 19:57:35:855 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, IDENTIFIER=19, NUMBER=20, WHITESPACE=21, COMMENT=22, TEXT=23}
2022-06-15 19:57:35:855 semantics LogManager.java:25 strings={'main'=1, 'int'=2, 'matrix'=3, 'printM'=4, 'write'=5, ';'=6, ','=7, '{'=8, '}'=9, '('=10, ')'=11, '['=12, ']'=13, '='=14, '+'=15, '-'=16, '*'=17, '^'=18, '//'=22}
2022-06-15 19:57:35:855 LL1 LogManager.java:25 
DECISION 0 in rule instructions
2022-06-15 19:57:35:855 LL1 LogManager.java:25 look=[{3, 5, 12, 19..20}, {3, 5, 12, 19..20}]
2022-06-15 19:57:35:855 LL1 LogManager.java:25 LL(1)? false
2022-06-15 19:57:35:855 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2022-06-15 19:57:35:855 LL1 LogManager.java:25 look=[{3, 20}, 19, 5, 12]
2022-06-15 19:57:35:855 LL1 LogManager.java:25 LL(1)? true
2022-06-15 19:57:35:855 LL1 LogManager.java:25 
DECISION 2 in rule list
2022-06-15 19:57:35:855 LL1 LogManager.java:25 look=[19, 19]
2022-06-15 19:57:35:855 LL1 LogManager.java:25 LL(1)? false
2022-06-15 19:57:35:855 LL1 LogManager.java:25 
DECISION 3 in rule type
2022-06-15 19:57:35:855 LL1 LogManager.java:25 look=[20, 3]
2022-06-15 19:57:35:855 LL1 LogManager.java:25 LL(1)? true
2022-06-15 19:57:35:855 LL1 LogManager.java:25 
DECISION 4 in rule expression
2022-06-15 19:57:35:855 LL1 LogManager.java:25 look=[20, 12, 19, 20, 20, 20, 18]
2022-06-15 19:57:35:855 LL1 LogManager.java:25 LL(1)? false
2022-06-15 19:57:35:855 LL1 LogManager.java:25 
DECISION 5 in rule lines
2022-06-15 19:57:35:855 LL1 LogManager.java:25 look=[20, 20]
2022-06-15 19:57:35:855 LL1 LogManager.java:25 LL(1)? false
2022-06-15 19:57:35:855 LL1 LogManager.java:25 
DECISION 6 in rule line
2022-06-15 19:57:35:855 LL1 LogManager.java:25 look=[20, 20]
2022-06-15 19:57:35:855 LL1 LogManager.java:25 LL(1)? false
